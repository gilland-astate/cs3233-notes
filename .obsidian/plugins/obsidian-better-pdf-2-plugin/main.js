/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => BetterPDFPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");

// settings.ts
var import_obsidian = require("obsidian");
var BetterPdfSettings = class {
  constructor() {
    this.fit_by_default = true;
    this.link_by_default = true;
  }
};
var BetterPdfSettingsTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    let { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Fit pages by default").setDesc("When turned on, pages will be scaled to the view by default. Can be overridden using the 'fit' parameter").addToggle((toggle) => toggle.setValue(this.plugin.settings.fit_by_default).onChange((value) => {
      this.plugin.settings.fit_by_default = value;
      this.plugin.saveData(this.plugin.settings);
    }));
    new import_obsidian.Setting(containerEl).setName("Link pages by default").setDesc("When turned on, pages will be linked to their document by default. Can be overridden using the 'link' parameter").addToggle((toggle) => toggle.setValue(this.plugin.settings.link_by_default).onChange((value) => {
      this.plugin.settings.link_by_default = value;
      this.plugin.saveData(this.plugin.settings);
    }));
  }
};

// main.ts
var BetterPDFPlugin = class extends import_obsidian2.Plugin {
  async onload() {
    console.log("Better PDF 2 loading...");
    this.settings = Object.assign(new BetterPdfSettings(), await this.loadData());
    this.addSettingTab(new BetterPdfSettingsTab(this.app, this));
    this.registerMarkdownCodeBlockProcessor("pdf", async (src, el, ctx) => {
      let parameters = null;
      try {
        parameters = this.readParameters(src);
      } catch (e) {
        el.createEl("h2", { text: "PDF Parameters invalid: " + e.message });
      }
      if (parameters !== null) {
        try {
          if (parameters.url.startsWith("./")) {
            const filePath = ctx.sourcePath;
            const folderPath = filePath.substring(0, filePath.lastIndexOf("/"));
            parameters.url = folderPath + "/" + parameters.url.substring(2, parameters.url.length);
          }
          const pdfjs = await (0, import_obsidian2.loadPdfJs)();
          const arrayBuffer = await this.app.vault.adapter.readBinary(parameters.url);
          const buffer = new Uint8Array(arrayBuffer);
          const document = await pdfjs.getDocument(buffer).promise;
          if (parameters.page.includes(0)) {
            let pagesArray = [];
            for (let i = 1; i <= document.numPages; i++) {
              pagesArray.push(i);
            }
            parameters.page = pagesArray;
          }
          for (const pageNumber of parameters.page) {
            const page = await document.getPage(pageNumber);
            let host = el;
            if (parameters.link) {
              const href = el.createEl("a");
              href.href = parameters.url + "#page=" + pageNumber;
              href.className = "internal-link";
              host = href;
            }
            const offsetX = Math.floor(
              parameters.rect[0] * -1 * parameters.scale
            );
            const offsetY = Math.floor(
              parameters.rect[1] * -1 * parameters.scale
            );
            const canvas = host.createEl("canvas");
            if (parameters.fit) {
              canvas.style.width = "100%";
            }
            const context = canvas.getContext("2d");
            if (context == null) {
              return;
            }
            const baseViewportWidth = page.getViewport({ scale: 1 }).width;
            const baseScale = canvas.clientWidth ? canvas.clientWidth / baseViewportWidth : 1;
            const viewport = page.getViewport({
              scale: baseScale * parameters.scale,
              rotation: parameters.rotation,
              offsetX,
              offsetY
            });
            if (parameters.rect[2] < 1) {
              canvas.height = viewport.height;
              canvas.width = viewport.width;
            } else {
              canvas.height = Math.floor(parameters.rect[2] * parameters.scale);
              canvas.width = Math.floor(parameters.rect[3] * parameters.scale);
            }
            const renderContext = {
              canvasContext: context,
              viewport
            };
            await page.render(renderContext);
          }
        } catch (error) {
          el.createEl("h2", { text: error });
        }
      }
    });
  }
  readParameters(dataString) {
    if (dataString.contains("[[") && !dataString.contains('"[[')) {
      dataString = dataString.replace("[[", '"[[');
      dataString = dataString.replace("]]", ']]"');
    }
    let parameters = null;
    let err = null;
    try {
      parameters = JSON.parse(dataString);
    } catch (error) {
      err = error;
    }
    try {
      parameters = (0, import_obsidian2.parseYaml)(dataString);
    } catch (error) {
      err = error;
    }
    if (parameters === null && err != null) {
      throw err;
    }
    if (parameters == null) {
      return null;
    }
    if (parameters.url.startsWith("[[")) {
      parameters.url = parameters.url.substring(2, parameters.url.length - 2);
      parameters.url = this.app.metadataCache.getFirstLinkpathDest(
        parameters.url,
        ""
      ).path;
    }
    if (parameters.link === void 0) {
      parameters.link = this.settings.link_by_default;
    }
    if (parameters.range !== void 0) {
      parameters.page = Array.from({ length: parameters.range[1] - parameters.range[0] + 1 }, (_, i) => parameters.range[0] + i);
    }
    if (typeof parameters.page === "number") {
      parameters.page = [parameters.page];
    }
    if (parameters.page === void 0) {
      parameters.page = [1];
    }
    for (let i = 0; i < parameters.page.length; i++) {
      if (Array.isArray(parameters.page[i])) {
        const range = parameters.page.splice(i, 1)[0];
        for (let j = range[0]; j <= range[1]; j++) {
          parameters.page.splice(i, 0, j);
          i += 1;
        }
      }
    }
    if (parameters.scale === void 0 || parameters.scale < 0.1 || parameters.scale > 10) {
      parameters.scale = 1;
    }
    if (parameters.fit === void 0) {
      parameters.fit = this.settings.fit_by_default;
    }
    if (parameters.rotation === void 0) {
      parameters.rotation = 0;
    }
    if (parameters.rect === void 0) {
      parameters.rect = [0, 0, 0, 0];
    }
    return parameters;
  }
  onunload() {
    console.log("unloading Better PDF 2 plugin...");
  }
};
